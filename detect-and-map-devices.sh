#!/bin/bash

# Auto-detect and generate device mappings for Docker Compose
# This script detects all available block devices and generates device mappings

set -e

OUTPUT_FILE="docker-compose-auto-devices.yaml"
TEMP_DEVICES_FILE="/tmp/detected_devices.txt"

echo "🔍 Detecting available block devices..."

# Function to detect all block devices
detect_block_devices() {
    echo "# Auto-detected block devices on $(date)" > "$TEMP_DEVICES_FILE"
    
    # Get all block devices including partitions
    lsblk -ndo NAME,TYPE | while read name type; do
        if [[ "$type" == "disk" ]] || [[ "$type" == "part" ]] || [[ "$type" == "lvm" ]]; then
            device="/dev/$name"
            if [[ -b "$device" ]]; then
                echo "      - $device:$device" >> "$TEMP_DEVICES_FILE"
                echo "Found: $device ($type)"
            fi
        fi
    done
    
    # Add common virtual devices
    echo "      # Virtual and special devices" >> "$TEMP_DEVICES_FILE"
    for dev in null zero random urandom tty console; do
        if [[ -c "/dev/$dev" ]] || [[ -b "/dev/$dev" ]]; then
            echo "      - /dev/$dev:/dev/$dev" >> "$TEMP_DEVICES_FILE"
            echo "Found: /dev/$dev (virtual)"
        fi
    done
    
    # Add loop devices if they exist
    echo "      # Loop devices" >> "$TEMP_DEVICES_FILE"
    for i in {0..31}; do
        if [[ -b "/dev/loop$i" ]]; then
            echo "      - /dev/loop$i:/dev/loop$i" >> "$TEMP_DEVICES_FILE"
            echo "Found: /dev/loop$i (loop)"
        fi
    done
    
    # Add USB bus if it exists
    if [[ -d "/dev/bus/usb" ]]; then
        echo "      # USB devices" >> "$TEMP_DEVICES_FILE"
        echo "      - /dev/bus/usb:/dev/bus/usb" >> "$TEMP_DEVICES_FILE"
        echo "Found: /dev/bus/usb (USB bus)"
    fi
}

# Function to generate complete Docker Compose file
generate_compose_file() {
    cat > "$OUTPUT_FILE" << 'EOF'
# Auto-generated Docker Compose with device detection
# Generated by: detect-and-map-devices.sh

version: '3.8'

services:
  dev-box-auto-devices:
    image: wn1980/dev-box:${ARCH:-amd64}
    container_name: dev_box_auto_devices
    privileged: true
    network_mode: host
    pid: host
    ipc: host
    user: root
    dns:
      - 8.8.8.8
      - 8.8.4.4
      - 1.1.1.1
    environment:
      - TZ=${TZ:-UTC}
      - COMPOSE_BAKE=true
      - HOST_DOCKER_GID=${HOST_DOCKER_GID:-988}
    volumes:
      # Configuration and workspace
      - config:/home/ubuntu/.config
      - conda:/home/ubuntu/.conda
      - Codespaces:/workspace
      
      # Docker socket (read-write for Docker-in-Docker)
      - /var/run/docker.sock:/var/run/docker.sock
      
      # Complete device and system access
      - /dev:/dev
      - /sys:/sys
      - /proc:/proc
      - /sys/fs/cgroup:/sys/fs/cgroup
      - /run/systemd:/run/systemd
      - /run/udev:/run/udev:ro
      - /lib/modules:/lib/modules:ro
      - /boot:/boot:ro
      - /sys/firmware:/sys/firmware:ro
      
    # Auto-detected device mappings
    devices:
EOF

    # Append detected devices
    cat "$TEMP_DEVICES_FILE" >> "$OUTPUT_FILE"
    
    # Add the rest of the configuration
    cat >> "$OUTPUT_FILE" << 'EOF'
      
    # Maximum capabilities
    cap_add:
      - ALL
      
    # Disable security restrictions
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
      
    # Additional sysctls for system control
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv6.conf.all.forwarding=1
      
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "pgrep", "-f", "sshd"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  config:
  conda:
  Codespaces:
    external: true
EOF
}

# Function to create a device testing script
create_device_test_script() {
    cat > "test-device-access.sh" << 'EOF'
#!/bin/bash

# Test device access from within the container

echo "🧪 Testing device access from container..."
echo "=========================================="

echo "📋 Available block devices:"
lsblk

echo ""
echo "💾 Disk information:"
df -h

echo ""
echo "🔍 /dev/sda* devices:"
ls -la /dev/sda* 2>/dev/null || echo "No /dev/sda* devices found"

echo ""
echo "🔍 NVMe devices:"
ls -la /dev/nvme* 2>/dev/null || echo "No NVMe devices found"

echo ""
echo "🔍 Loop devices:"
ls -la /dev/loop* 2>/dev/null || echo "No loop devices found"

echo ""
echo "📊 Partition information:"
cat /proc/partitions

echo ""
echo "🏗️ Device mapper:"
ls -la /dev/mapper/ 2>/dev/null || echo "No device mapper found"

echo ""
echo "🔧 Testing direct device access (read-only):"
for device in /dev/sda /dev/nvme0n1; do
    if [[ -b "$device" ]]; then
        echo "Testing $device..."
        # Try to read first sector (safe, read-only test)
        if dd if="$device" of=/dev/null bs=512 count=1 2>/dev/null; then
            echo "✅ Successfully accessed $device"
        else
            echo "❌ Failed to access $device"
        fi
    fi
done

echo ""
echo "🐳 Docker-in-Docker test:"
if command -v docker >/dev/null 2>&1; then
    echo "✅ Docker is available"
    docker --version
    echo "🏃 Testing Docker containers:"
    docker ps 2>/dev/null || echo "Docker daemon might not be running"
else
    echo "❌ Docker not found in container"
fi

echo ""
echo "✅ Device access test completed!"
EOF

    chmod +x "test-device-access.sh"
}

# Main execution
echo "🚀 Starting device detection and Docker Compose generation..."

# Detect devices
detect_block_devices

# Generate compose file
generate_compose_file

# Create test script
create_device_test_script

# Clean up
rm -f "$TEMP_DEVICES_FILE"

echo ""
echo "✅ Generation completed!"
echo "📁 Files created:"
echo "   - $OUTPUT_FILE (Docker Compose with auto-detected devices)"
echo "   - test-device-access.sh (Container device testing script)"
echo ""
echo "🚀 Usage:"
echo "   docker-compose -f $OUTPUT_FILE up -d"
echo "   docker exec -it dev_box_auto_devices bash"
echo "   ./test-device-access.sh"
echo ""
echo "📋 Detected devices:"
cat "$TEMP_DEVICES_FILE" 2>/dev/null || echo "No devices file found"
