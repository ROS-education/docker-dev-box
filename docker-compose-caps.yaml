# File: /home/developer/DEV/docker-dev-box/docker-compose-caps.yaml
# Enhanced security configuration using Linux capabilities instead of privileged mode

# Create a .env file in this directory with the following content:
# HOST_DOCKER_GID=$(getent group docker | cut -d: -f3 || echo 999)
# (Replace 999 with a default GID if the docker group doesn't exist on your host)

services:
  dev-box:
    # build:
    #   context: .
    #   args:
    #     HOST_DOCKER_GID: ${HOST_DOCKER_GID:-988} # Use default if not set
    #     TARGETARCH: ${TARGETARCH:-} # BuildKit automatic platform detection
    #     ARCH: ${ARCH:-arm64} # Keep existing ARCH for backward compatibility
    image: wn1980/dev-box:${ARCH:-arm64} # Set the custom image name and tag
    # Define the image name and tag.
    container_name: dev_box
    
    # Enhanced security: Use specific capabilities instead of privileged mode
    # This provides necessary functionality while reducing security risks
    cap_drop:
      - ALL                    # Drop all capabilities first
    cap_add:
      - SYS_ADMIN             # Required for USB devices, mount operations
      - SYS_PTRACE            # Required for debugging (gdb, strace)
      - NET_ADMIN             # Required for network configuration  
      - NET_RAW               # Required for ping, packet capture, raw sockets
      - DAC_OVERRIDE          # Required for file permission overrides
      - SETUID                # Required for sudo operations
      - SETGID                # Required for group changes
      - MKNOD                 # Required for device node creation
      # Optional capabilities (uncomment if needed):
      # - SYS_CHROOT          # For chroot environments
      # - SYS_TIME            # For time management
      # - SYS_MODULE          # For kernel module management
    
    network_mode: host        # Use host networking for direct network access
    
    environment:
      - TZ=Asia/Bangkok
      - COMPOSE_BAKE=true
      # - N8N_DIAGNOSTICS_ENABLED=false
      # - N8N_VERSION_NOTIFICATIONS_ENABLED=false
      # - N8N_TEMPLATES_ENABLED=false
      # - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      # - N8N_RUNNERS_ENABLED=true
      # - N8N_DIAGNOSTICS_CONFIG_FRONTEND=
      # - N8N_DIAGNOSTICS_CONFIG_BACKEND=
      # - EXTERNAL_FRONTEND_HOOKS_URLS=
    
    volumes:
      - config:/home/ubuntu/.config
      - conda:/home/ubuntu/.conda
      # - n8n_data:/home/ubuntu/.n8n
      - Codespaces:/workspace
      # - projects:/home/ubuntu/projects
      
      # Mount the host Docker socket
      - /var/run/docker.sock:/var/run/docker.sock:ro # Read-only for security
      
      # Enhanced USB and device access with capabilities
      - /dev:/dev:ro           # Read-only device access (more secure)
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
      
    # Specific device access (alternative to full /dev mount)
    # Uncomment and modify as needed for specific USB devices:
    devices:
      - /dev/bus/usb:/dev/bus/usb          # USB device bus
      # - /dev/ttyUSB0:/dev/ttyUSB0        # Serial USB devices
      # - /dev/ttyACM0:/dev/ttyACM0        # Arduino/microcontroller devices
      # - /dev/video0:/dev/video0          # Camera devices
    
    # NOTE: When using network_mode: host, port mapping is not needed
    # Services bind to host ports directly
    # ports:
    #  - "8443:8443"  # Code Server HTTPS
    #  - "2222:22"    # SSH Server for Remote-SSH
    
    restart: unless-stopped
    # user: "1000:1000" # Keep removed - Container starts as root for supervisord

    # Optional: Add resource limits
    # Adjust these values based on your host machine and needs
    # deploy:
    #   resources:
    #     limits:
    #       memory: 4G        # Limit memory usage
    #       cpus: '2.0'       # Limit CPU usage
    #     reservations:
    #       memory: 1G        # Reserve minimum memory
    #       cpus: '0.5'       # Reserve minimum CPU

    # Optional: Add labels for organization
    labels:
      - "com.example.description=Code Server Development Environment with Capabilities"
      - "com.example.project=docker-dev-box"
      - "com.example.security=capability-based"

    healthcheck:
      # Test command for code-server health
      test: ["CMD", "curl", "-fk", "http://localhost:8443/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  config:
  conda:
  Codespaces:
    external: true
  # n8n_data:
  #   external: true
